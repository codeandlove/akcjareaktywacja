import React, {forwardRef, useEffect, useState} from "react";import { EditorState, convertToRaw, ContentState } from "draft-js";import { Editor } from "react-draft-wysiwyg";import draftToHtml from "draftjs-to-html";import htmlToDraft from 'html-to-draftjs';import "./EventForm.scss";import truncate from "truncate";import UrlSlug from "url-slug";import { connect } from "react-redux";import {bindActionCreators, compose} from "redux";import { firebaseConnect, isEmpty, isLoaded } from "react-redux-firebase";import moment from "moment";import "moment/locale/pl";import DatePicker from "react-datepicker";import {Segment, Header, Message, Button, Form, Input, Icon, Confirm, Popup, Modal} from "semantic-ui-react";import {ACTION, EVENT_FORM, EVENTS_LIST, PREVIEW, USER} from "../../routers";import {analytics} from "../../../firebase/analytics";import {withGoogleReCaptcha} from "react-google-recaptcha-v3";import {    findPhoneNumber,    findSwearWord,    findUrlString,    getCategoriesDataByIds, notifyToSlackChannel,    searchPlaceData,    verifyCaptcha} from "../../utils";import LocationName, {formatLocationName} from "../../components/LocationAddressFormatter/LocationAddressFormatter";import {pushNotification} from "../../notifications";import CategorySelector from "../CategorySelector/CategorySelector";import {SLACK_NEW_VISITOR_HOOK} from "../../consts";import {withRouter} from "react-router";import {useFormState} from "../../hooks";import * as actionCreators from "../../actions";const EventForm = (props) => {    const {        event,        removeEvent,        updateEvent,        history,        firebase,        auth,        profile,        client: {ip, duuid, country},        isMobile,        match: {params},        openSidebar,        closeSidebar,        expandSidebar,        collapseSidebar,        sidebarIsExpanded    } = props;    let editorInitialState = EditorState.createEmpty();    if(!!event.description) {        const contentBlock = htmlToDraft(event.description);        const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);        editorInitialState = EditorState.createWithContent(contentState);    }    const [editorState, setEditorState] = useState(editorInitialState);    const [openAddConfirm, setOpenAddConfirm] = useState(false);    const [openCancelConfirm, setOpenCancelConfirm] = useState(false);    const [openCategorySelector, setOpenCategorySelector] = useState(false);    const [discard, setDiscard] = useState(false);    const [messageType, setMessageType] = useState(null);    const [searchPhrase, setSearchPhrase] = useState(event.searchPhrase || null);    const [locationSuggestions, setLocationSuggestions] = useState(event.locationSuggestions || []);    const [suggestionsLoading, setSuggestionsLoading] = useState(false);    const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState(event.selectedSuggestionIndex);    const [suggestionTimeout, setSuggestionTimeout] = useState(null);    const [formState, setFormState, handleChange, validateValues] = useFormState({        title: event.title || null,        description: event.description || null,        categories: event.categories || null,        short: event.short || null,        date: event.date || moment().startOf('hour').add(1, 'hour').valueOf(),        coordinates: event.coordinates || null,        owner: event.owner || null,        contact: event.contact || null,        location: event.location || null    });    const {title, description, categories, short, date, coordinates, owner, contact, location} = formState;    useEffect(() => {        analytics.logEvent('User opened a event form');        openSidebar();        if (!isEmpty(profile)) {            setFormState({                owner: profile.displayNick            });        }        if(!!searchPhrase) {            setFormState({                location: searchPhrase            });        }        return () => {            if (discard) {                setFormState({});            }        }    }, [])    useEffect(() => {        if(!!event && !!event.coordinates) {            if(event.coordinates !== coordinates) {                setFormState({                    coordinates: event.coordinates                })            }        }    }, [event])    useEffect(() => {        if(discard) {            setFormState({});            history.replace('/');        }    }, [discard])    useEffect(() => {        if (!isEmpty(params)) {            let date = moment(params.eventDate, "DD-MM-YYYY").hour(20);            //Prevent to set past date            if (date.diff(moment(), "days") < 0) {                date = moment();            }            setFormState({                date: date.valueOf()            });        }    }, [params])    useEffect(() => {        updateEvent({            ...formState        })    }, [formState]);    useEffect(() => {        if(!!searchPhrase && searchPhrase.length > 3){            clearTimeout(suggestionTimeout);            const suggestion = setTimeout(() => {                getSuggestedLocations(searchPhrase);                clearTimeout(suggestionTimeout);                setSuggestionTimeout(null);            }, 500);            setSuggestionTimeout(suggestion);        }    }, [searchPhrase]);    useEffect(() => {        updateEvent({            ...{                searchPhrase: searchPhrase,                locationSuggestions: locationSuggestions,                selectedSuggestionIndex: selectedSuggestionIndex            }        })    }, [searchPhrase, locationSuggestions, selectedSuggestionIndex]);    const handleSaveEvent = data => {        firebase.push("events", data).then(() => {            removeEvent();            collapseSidebar();            history.push("/");        });    };    const initAddConfirm = () => {        verifyCaptcha(props, 'eventForm').then(token => {            if (token) {                setOpenAddConfirm(true);            }        });    };    const executeAddConfirmation = (data) => {        setOpenAddConfirm(false);        data && handleSave();    }    const executeCancelConfirmation = (data) => {        setOpenCancelConfirm(false);        data && cancelForm();    }    const executeToggleCategorySelector = (data) => {        setOpenCategorySelector(state => {            return data || !state        });    }    const renderMessage = () => {        let result;        switch (messageType) {            case "nick/nick-exist":                result = (                    <Message                        error                        header="BÅ‚Ä…d formularza"                        size="mini"                        content="UÅ¼ytkownik o takim nicku juÅ¼ istnieje. JeÅ›li to Ty zaloguj siÄ™, aby korzystaÄ‡ z Twojego podpisu."                    />                );                break;            case "found-url-string":                result = (                    <Message                        color="orange"                        size="mini"                        content="Uwaga na roboty! ðŸ¤– - TreÅ›Ä‡ zawiera adres URL. Zmodyfikuj treÅ›Ä‡ aby opublikowaÄ‡ wydarzenie."                    />                );                break;            case "found-phone-string":                result = (                    <Message                        color="orange"                        size="mini"                        content="Uwaga! Nie podawaj numeru telefonu w treÅ›ci wydarzenia. JeÅ›li chcesz, podaj numer telefonu w polu kontakt w formacie XXXXXXXXX aby zostaÅ‚ ukryty dla robotÃ³w ðŸ¤–ðŸ¤–ðŸ¤–."                    />                );                break;            case "found-swear-word":                result = (                    <Message                        color="orange"                        size="mini"                        content="Wprowadzona treÅ›Ä‡ zawiera niestosowne sÅ‚owa. ProszÄ™ poprawiÄ‡ treÅ›Ä‡ aby byÅ‚a bardziej przyjazna dla odwiedzajÄ…cych."                    />                );                break;            default:                result = null;                break;        }        return result;    }    const validateExcludes = (values) => {        const result = values.filter(val => {            if (formState[val] && typeof formState[val] === 'string') {                if (findUrlString(formState[val])) {                    setMessageType("found-url-string");                    return true;                }                if (val !== "contact" && findPhoneNumber(formState[val])) {                    setMessageType("found-phone-string");                    return true;                }                if (findSwearWord(formState[val])) {                    setMessageType("found-swear-word");                    return true;                }                return false;            }            return false;        });        return result.length !== 0;    }    const onEditorStateChange = (editorState) => {        setEditorState(editorState);        setFormState({            description: draftToHtml(convertToRaw(editorState.getCurrentContent())),            short: truncate(editorState.getCurrentContent().getPlainText(), 100)        });    };    const handleSave = () => {        const data = {            title: title,            description: description,            short: short,            owner: owner,            contact: contact,            coordinates: coordinates,            categories: categories,            location: location,            date: moment(date).valueOf(),            slug: UrlSlug(`${title} ${moment(date).format("L")}`)        };        if (validateValues(["title", "description", "date", "owner", "contact", "coordinates", "location", "categories"])) return;        if (validateExcludes(["title", "description", "date", "owner", "contact", "coordinates", "location"])) return;        if (isLoaded(auth) && isEmpty(auth)) {            const usersRef = firebase.database().ref("/users");            //Check if nick is unique            usersRef.orderByChild("displayNick").equalTo(owner).once("value").then(snapshot => {                if (!snapshot.val()) {                    firebase.auth().signInAnonymously().then(res => {                        handleSaveEvent({                            ...data,                            participants: [res.user.uid],                            clients_ip: [`${ip}.${duuid}`]                        });                        pushNotification(`Nowe wydarzenie: ${title}`, `${short}`, 'events');                        setDiscard(true);                    });                } else {                    setMessageType("nick/nick-exist");                }            });        } else {            handleSaveEvent({                ...data,                participants: [auth.uid],                clients_ip: [`${ip}.${duuid}`]            });            pushNotification(`Nowe wydarzenie: ${title}`, `${short}`, 'events');            setDiscard(true);        }    }    const confirmCancelForm = () => {        setOpenCancelConfirm(true);    }    const cancelForm = () => {        setDiscard(true);        history.push(`/${EVENTS_LIST}`);        collapseSidebar();        removeEvent();        analytics.logEvent('User canceled form', title ? {            title: title        } : null);        const notifyData = `            ${title}             ${description} ,            ${categories} ,            ${short} ,            ${date} ,            ${owner} ,            ${contact} ,            ${coordinates ? `${coordinates.lat} ${coordinates.lng}` : ''} ,            ${location}        `;        notifyToSlackChannel(SLACK_NEW_VISITOR_HOOK,            {                "text": "Visitor cancelled a form.",                "blocks": [                    {                        "type": "section",                        "text": {                            "type": "mrkdwn",                            "text": notifyData                        }                    }                ]            }        );    }    const previewDraft = () => {        history.push(`/${ACTION}/${PREVIEW}`);    }    const handleKeyPress = event => {        if (event.key === 'Enter') {            event.preventDefault();        }    }    const formatCoordinates = () => {        if (!coordinates) return '';        return `${coordinates.lat}, ${coordinates.lng}`;    }    const changeCoordinates = () => {        closeSidebar()    }    const getSuggestedLocations = (place) => {        if(!country) return;        setSuggestionsLoading(true);        setSelectedSuggestionIndex(null);        setLocationSuggestions([]);        setFormState({            coordinates: null        })        searchPlaceData(place, ['countrycodes=' + country.toLowerCase()]).then(data => {            setFormState({                location: place            })            setLocationSuggestions(data);            setSuggestionsLoading(false);        });    }    const selectPlace = (phrase, data, index) => {        if (selectedSuggestionIndex === index) {            setSelectedSuggestionIndex(null);            setFormState({                coordinates: null,                location: phrase            });            return;        }        const {lat, lon, address} = data;        const [meaning, rest] = formatLocationName(phrase, address);        setSelectedSuggestionIndex(index);        if (isMobile) {            closeSidebar();        }        setFormState({            coordinates: {                lat: lat,                lng: lon            },            location: `${meaning}, ${rest}`        })    }    const onChosenCategory = (categories) => {        setFormState({            categories: categories        })    }    const renderCategorySelectorModal = () => {        return (            <Modal                onClose={() => executeToggleCategorySelector(false)}                onOpen={() => executeToggleCategorySelector(true)}                open={openCategorySelector}            >                <Modal.Header>Wybierz kategorie</Modal.Header>                <Modal.Content scrolling>                    <CategorySelector selectedCategories={categories}                                      onChosenCategory={categories => onChosenCategory(categories)}/>                </Modal.Content>                <Modal.Actions>                    <Button                        content="ZatwiedÅº"                        labelPosition='right'                        icon='checkmark'                        onClick={() => executeToggleCategorySelector(false)}                        color="blue"                    />                </Modal.Actions>            </Modal>        )    }    const displayChosenCategories = (categories) => {        const categoriesData = getCategoriesDataByIds(categories),            result = categoriesData.map((cat, key) => `${cat.label} ${key < categoriesData.length - 1 ? '> ' : ''}`).join('');        analytics.logEvent('User selected', {            categories: result        });        return result;    }    const changeCategory = () => {        setOpenCategorySelector(true)    }    const handleChangeDate = val => {        setFormState({            date: val.valueOf()        });        if(!isEmpty(params)) {            history.replace(`/${EVENT_FORM}`);        }    }    return (        <>            <Segment clearing basic>                <Button basic onClick={confirmCancelForm} floated="right" icon="x"/>                {                    sidebarIsExpanded ? (                        <Button className="button-event-form-compress" basic onClick={collapseSidebar} floated="right"                                icon="compress"/>                    ) : (                        <Button className="button-event-form-expand" basic onClick={expandSidebar} floated="right"                                icon="expand"/>                    )                }                <Header floated="left" size="large">                    Dodaj wydarzenie                </Header>            </Segment>            <Segment clearing basic>                <Form error={messageType !== null} onSubmit={initAddConfirm} onKeyPress={handleKeyPress}>                    {renderMessage()}                    <Form.Field>                        <label>Kategoria</label>                        <Input placeholder="Wybierz kategorie" type="text" id="title" name="title"                               action={{                                   color: 'blue',                                   labelPosition: 'right',                                   icon: 'list',                                   content: !categories ? 'Wybierz' : 'ZmieÅ„',                                   type: 'button',                                   onClick: () => changeCategory()                               }}                               readOnly value={!!categories ? displayChosenCategories(categories) : ""}                               onChange={handleChange("categories")}                        />                        {renderCategorySelectorModal()}                    </Form.Field>                    <Form.Field>                        <label>TytuÅ‚</label>                        <Input placeholder="Wpisz tytuÅ‚ wydarzenia" type="text" id="title" name="title"                               value={title || ""} onChange={handleChange("title")}/>                    </Form.Field>                    <Form.Group widths="equal">                        {isEmpty(profile) ?                            (                                <Form.Field width={6}>                                    <label>Organizator</label>                                    <Input id="owner" name="owner" value={owner} placeholder="Wpisz nazwÄ™ organizatora"                                           onChange={handleChange("owner")}/>                                </Form.Field>                            ) : (                                <Form.Field width={6}>                                    <label>Organizator</label>                                    {                                        !owner ? (                                            <Button fluid basic color="olive" type="button" icon='user'                                                    content="Dodaj nick" onClick={() => {                                                history.push(`/${USER}`);                                            }}/>                                        ) : (                                            <Input icon='user' iconPosition='left' value={owner} name="owner" disabled/>                                        )                                    }                                </Form.Field>                            )                        }                        <Popup                            trigger={                                <Form.Input width={6} label="Kontakt" id="contact" name="contact" value={contact}                                            placeholder="Jak siÄ™ z TobÄ… skontaktowaÄ‡?"                                            onChange={handleChange("contact")}/>                            }                            position='bottom right'                            content='Ukryjemy TwÃ³j numer telefonu pod przyciskiem jeÅ›li wpisz go w nastÄ™pujÄ…cej formie xxxxxxxxx (bez spacji i myÅ›lnikÃ³w).'                            size="mini"                            inverted                            on={['hover', 'click']}                        />                    </Form.Group>                    <Form.Group widths="equal">                        <Form.Field width={6}>                            <label>Data i czas</label>                            <DatePicker                                customInput={<DateInput/>}                                selected={moment(date)}                                onChange={val => handleChangeDate(val)}                                onSelect={val => handleChangeDate(val)}                                minDate={moment()}                                minTime={moment(date).startOf('day') <= moment().startOf('day') ? moment().add(15, "minutes") : moment().startOf('day')}                                maxTime={moment().endOf('day')}                                showTimeSelect                                timeFormat="HH:mm"                                timeIntervals={15}                                dateFormat="LLL"                                locale="pl"                                timeCaption="Godzina"                            />                        </Form.Field>                        <Form.Field width={6}>                            <label>Miejsce spotkania</label>                            <Input placeholder="Wpisz lokacjÄ™" type="text" id="location" name="location"                                   value={searchPhrase || ""} onChange={e => setSearchPhrase(e.target.value)}                                   loading={suggestionsLoading}                            />                        </Form.Field>                    </Form.Group>                    {                        locationSuggestions.length ? (                            <Form.Field>                                <label>Podpowiedzi</label>                                <Segment.Group stacked size="mini">                                    {                                        locationSuggestions.map((data, index) => {                                            const {address} = data;                                            const isSelected = selectedSuggestionIndex === index;                                            return (                                                <Segment key={`suggestion-key-${index}`} size="mini"                                                         color={isSelected ? `olive` : ``}                                                         inverted={isSelected}                                                         onClick={() => selectPlace(searchPhrase, data, index)}                                                >                                                    <LocationName phrase={searchPhrase}                                                                  address={address}/>                                                </Segment>                                            )                                        })                                    }                                </Segment.Group>                            </Form.Field>                        ) : <></>                    }                    <Form.Field>                        <label>Koordynaty</label>                        {                            !coordinates && (                                <Message                                    color="blue"                                    size="mini"                                    content="Klinknij na mapÄ™, aby dodaÄ‡ punkt w miejscu spotkania."                                />                            )                        }                        <Input                            placeholder="Koordynaty spotkania"                            action={{                                color: 'blue',                                labelPosition: 'right',                                icon: 'map marker alternate',                                content: !coordinates ? 'Wybierz' : 'Dostosuj',                                type: 'button',                                onClick: () => changeCoordinates()                            }}                            value={formatCoordinates()}                            readOnly                        />                    </Form.Field>                    <Form.Field>                        <label>Opis</label>                        <Editor                            editorState={editorState}                            wrapperClassName="ar-editor-wrapper"                            editorClassName="ar-editor"                            onEditorStateChange={onEditorStateChange}                            placeholder="Napisz coÅ› o Twoim wydarzeniu..."                            localization={{                                locale: "pl",                            }}                            toolbar={{                                options: ["inline", "fontSize", "textAlign", "colorPicker", "emoji", "image"],                                inline: {                                    options: ["bold"],                                },                                textAlign: {                                    inDropdown: true                                },                                link: {                                    popupClassName: 'dropdown-custom-center'                                },                                emoji: {                                    popupClassName: 'dropdown-custom-center'                                },                                image: {                                    popupClassName: 'dropdown-custom-right'                                }                            }}                        />                    </Form.Field>                    <Form.Field>                        <Button type="button" onClick={confirmCancelForm} floated="left">                            Anuluj                        </Button>                        <Button type="submit" floated="right" color="olive"                                disabled={validateValues(["title", "description", "date", "owner", "contact", "coordinates", "location", "categories"]) || messageType === "nick/nick-exist"}>                            <Icon name="check"/>                            Dodaj                        </Button>                        <Button type="button" onClick={previewDraft} floated="right" color="blue">                            PodglÄ…d                        </Button>                    </Form.Field>                </Form>                <Confirm                    open={openAddConfirm}                    cancelButton="Nie"                    confirmButton="Tak"                    content="Czy chcesz dodaÄ‡ nowe wydarzenie w zaznaczonym miejscu?"                    onCancel={() => executeAddConfirmation(false)}                    onConfirm={() => executeAddConfirmation(true)}                />                <Confirm                    open={openCancelConfirm}                    cancelButton="Nie"                    confirmButton="Tak"                    content="Czy chcesz zrezygnowaÄ‡ z dodawania tego wydarzenia? Wszystkie dane z formularza zostanÄ… trwale usuniÄ™te."                    onCancel={() => executeCancelConfirmation(false)}                    onConfirm={() => executeCancelConfirmation(true)}                />            </Segment>        </>    )}const DateInput = forwardRef((props, ref) => {    const {value, onClick} = props;    return (        <Input placeholder="Podaj datÄ™ i czas" type="text" id="date" name="date" value={value} onClick={onClick} onFocus={onClick} />    )});const mapStateToProps = state => {    return {        client: state.client,        ...state.map,        event: state.event,        ...state.layout    }};const mapDispatchToProps = (dispatch) => {    return bindActionCreators(actionCreators, dispatch);};export default compose(    firebaseConnect(),    connect(({ firebase: { auth, profile } }) => ({ auth, profile })),    connect(mapStateToProps, mapDispatchToProps))(withGoogleReCaptcha(withRouter(EventForm)));