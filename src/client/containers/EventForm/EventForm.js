import React, { Component } from "react";import PropTypes from "prop-types";import { EditorState, convertToRaw, ContentState } from "draft-js";import { Editor } from "react-draft-wysiwyg";import draftToHtml from "draftjs-to-html";import htmlToDraft from 'html-to-draftjs';import "./EventForm.scss";import truncate from "truncate";import UrlSlug from "url-slug";import { connect } from "react-redux";import { compose } from "redux";import { firebaseConnect, isEmpty, isLoaded } from "react-redux-firebase";import moment from "moment";import "moment/locale/pl";import DatePicker from "react-datepicker";import {Segment, Header, Message, Button, Form, Input, Icon, Confirm, Popup, Modal} from "semantic-ui-react";import {ACTION, PREVIEW} from "../../routers";import {analytics} from "../../../firebase/analytics";import {withGoogleReCaptcha} from "react-google-recaptcha-v3";import {    findPhoneNumber,    findSwearWord,    findUrlString,    getCategoriesDataByIds,    searchPlaceData,    verifyCaptcha} from "../../utils";import LocationName, {formatLocationName} from "../../components/LocationAddressFormatter/LocationAddressFormatter";import {pushNotification} from "../../notifications";import CategorySelector from "../CategorySelector/CategorySelector";class EventForm extends Component {    constructor(props) {        super(props);        this.state = {            title: null,            editorState: null,            description: null,            categories: null,            short: null,            date: moment().startOf('hour').add(1, 'hour'),            owner: null,            contact: null,            coordinates: null,            coordinatesEdit: false,            openAddConfirm: false,            openCancelConfirm: false,            openCategorySelector: false,            location: null,            discard: false,            messageType: null,            locationSearchPhrase: null,            locationSuggestions: [],            suggestionsLoading: false,            selectedSuggestionIndex: null,        }        this.suggestionsTimeout = null;    }    componentDidMount() {        const { coordinates, profile, params, toggleColumn } = this.props;        const draft = JSON.parse(localStorage.getItem("eventDraft"));        analytics.logEvent('User opened a event form');        toggleColumn(true);        this.setState({            editorState: EditorState.createEmpty()        });        if(coordinates) {            this.setState({                coordinates: coordinates            });        }        if(!isEmpty(profile)) {            this.setState({                owner: profile.displayNick || ""            });        }        if(!isEmpty(params)) {            let date = moment(params.eventDate, "DD-MM-YYYY").hour(20);            //Prevent to set past date            if(date.diff(moment(), "days") < 0) {                date = moment();            }            this.setState({                date: date            });        }        if(!isEmpty(draft)) {            //read from local storage            let draftState = {                title: draft.title,                location: draft.location,                contact: draft.contact,                description: draft.description,                short: draft.short,                categories: draft.categories,                locationSearchPhrase: draft.locationSearchPhrase,                locationSuggestions: draft.locationSuggestions,                selectedSuggestionIndex: draft.selectedSuggestionIndex            };            if(draft.date && !isEmpty(params)) {                draftState = {                    ...draftState,                    date: moment(draft.date).valueOf()                }            }            if(draft.coordinates && !coordinates) {                draftState = {                    ...draftState,                    coordinates: draft.coordinates                }            }            if(!this.state.owner) {                draftState = {                    ...draftState,                    owner: draft.owner                }            }            if(draft.description) {                const contentBlock = htmlToDraft(draft.description);                const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);                this.setState({                    editorState: EditorState.createWithContent(contentState)                });            }            this.setState({                ...draftState,                messageType: "editor/draft-state"            }, () => {                this.props.updateEvent({                    coordinates: draft.coordinates ? draft.coordinates : coordinates                })            });        }        window.addEventListener('beforeunload', this.setDraft);    }    componentWillUnmount() {        const { discard, coordinatesEdit } = this.state;        window.removeEventListener('beforeunload', this.setDraft);        if(discard) {            localStorage.removeItem("eventDraft");            return;        }        if(coordinatesEdit) {            this.setDraft({                coordinates: null            });            return;        }        this.setDraft();    }    componentWillReceiveProps(props) {        if(!!props.coordinates) {            this.setState({                coordinates: props.coordinates            });        }        if(!isEmpty(props.profile)) {            this.setState({                owner: props.profile.displayNick || ""            });        }    }    setDraft = (custom) => {        const draft = {            ...this.state,            date: this.state.date,            ...custom        };        localStorage.setItem("eventDraft", JSON.stringify(draft));    }    initAddConfirm = () => {        verifyCaptcha(this.props, 'eventForm').then(token => {            if(token){                this.setState({                    openAddConfirm: true                });            }        });    };    executeAddConfirmation = (val) => {        this.setState({            openAddConfirm: false        }, () => val && this.handleSave());    }    executeCancelConfirmation = (val) => {        this.setState({            openCancelConfirm: false        }, () => val && this.cancelForm());    }    executeToggleCategorySelector = (val) => {        this.setState( state => ({            openCategorySelector: val || !state.openCategorySelector        }))    }    renderMessage = () => {        const { messageType } = this.state;        let result;        switch(messageType) {            case "nick/nick-exist":                result = (                    <Message                        error                        header="BÅ‚Ä…d formularza"                        size="mini"                        content="UÅ¼ytkownik o takim nicku juÅ¼ istnieje. JeÅ›li to Ty zaloguj siÄ™, aby korzystaÄ‡ z Twojego podpisu."                    />                );                break;            case "editor/draft-state":                result = (                    <Message                        color="green"                        size="mini"                        content="Zapisano wersjÄ™ roboczÄ… wydarzenia."                    />                );                break;            case "found-url-string":                result = (                    <Message                        color="orange"                        size="mini"                        content="Uwaga na roboty! ðŸ¤– - TreÅ›Ä‡ zawiera adres URL. Zmodyfikuj treÅ›Ä‡ aby opublikowaÄ‡ wydarzenie."                    />                );                break;            case "found-phone-string":                result = (                    <Message                        color="orange"                        size="mini"                        content="Uwaga! Nie podawaj numeru telefonu w treÅ›ci wydarzenia. JeÅ›li chcesz, podaj numer telefonu w polu kontakt w formacie XXXXXXXXX aby zostaÅ‚ ukryty dla robotÃ³w ðŸ¤–ðŸ¤–ðŸ¤–."                    />                );                break;            case "found-swear-word":                result = (                    <Message                        color="orange"                        size="mini"                        content="Wprowadzona treÅ›Ä‡ zawiera niestosowne sÅ‚owa. ProszÄ™ poprawiÄ‡ treÅ›Ä‡ aby byÅ‚a bardziej przyjazna dla odwiedzajÄ…cych."                    />                );                break;            default:                result = null;                break;        }        return result;    };    validateValues = (values) => {        const result = values.filter(val => {            return this.state[val] === false || this.state[val] === null || !this.state[val];        });        return result.length !== 0;    };    validateExcludes = (values) => {        const result = values.filter(val => {            if(this.state[val] && typeof this.state[val] === 'string') {                if(findUrlString(this.state[val])) {                    this.setState({                        messageType: "found-url-string"                    });                    return true;                }                if(val !== "contact" && findPhoneNumber(this.state[val])) {                    this.setState({                        messageType: "found-phone-string"                    });                    return true;                }                if(findSwearWord(this.state[val])) {                    this.setState({                        messageType: "found-swear-word"                    });                    return true;                }                return false;            }            return false;        });        return result.length !== 0;    }    handleChange = name => event => {        switch(name) {            case "date":                this.setState({                    date: event                });                break;            case "location":                this.setState({                    location: event.target.value                });                clearTimeout(this.suggestionsTimeout);                if(event.target.value.length < 3) break;                this.setState({                    suggestionsLoading: true                });                this.suggestionsTimeout = setTimeout(() => {                    this.getSuggestedLocations(event.target.value);                    clearTimeout(this.suggestionsTimeout);                }, 500);                break;            default:                this.setState({                    [name]: event.target.value                });        }    };    onEditorStateChange = (editorState) => {        this.setState({            editorState,            description: draftToHtml(convertToRaw(editorState.getCurrentContent())),            short: truncate(editorState.getCurrentContent().getPlainText(), 100)        });    };    handleSave = () => {        const { title, description, short, date, owner, contact, coordinates, location, categories } = this.state;        const { auth, firebase, client: {ip, duuid} } = this.props;        const data = {            title: title,            description: description,            short: short,            owner: owner,            contact: contact,            coordinates: coordinates,            categories: categories,            location: location,            date: date.valueOf(),            slug: UrlSlug(`${title} ${date.format("L")}`)        };        if(this.validateValues(["title", "description", "date", "owner", "contact", "coordinates", "location", "categories"])) return;        if(this.validateExcludes(["title", "description", "date", "owner", "contact", "coordinates", "location"])) return;        if(isLoaded(auth) && isEmpty(auth)){            const usersRef = firebase.database().ref("/users");            //Check if nick is unique            usersRef.orderByChild("displayNick").equalTo(owner).once("value").then(snapshot => {                if(!snapshot.val()) {                    firebase.auth().signInAnonymously().then(res => {                        this.props.saveEvent({                            ...data,                            participants: [res.user.uid],                            clients_ip: [`${ip}.${duuid}`]                        });                        pushNotification(`Nowe wydarzenie: ${title}`, `${short}`, 'events');                        this.setState({                            discard: true                        });                    });                } else {                    this.setState({                        messageType: "nick/nick-exist"                    });                }            });        } else {            this.props.saveEvent({                ...data,                participants: [auth.uid],                clients_ip: [`${ip}.${duuid}`]            });            pushNotification(`Nowe wydarzenie: ${title}`, `${short}`, 'events');            this.setState({                discard: true            })        }    }    confirmCancelForm = () => {        this.setState({            openCancelConfirm: true        })    }    cancelForm = () => {        this.setState({            discard: true        }, () => {            this.props.cancel();        });        analytics.logEvent('User canceled form', this.state && this.state.title ? {            title: this.state.title        }: null);    }    previewDraft = () => {        const { router } = this.context;        this.setDraft();        router.history.push(`/${ACTION}/${PREVIEW}`);    }    handleKeyPress = event => {        if(event.key === 'Enter') {            event.preventDefault();        }    }    formatCoordinates = () => {        const {coordinates} = this.state;        if(!coordinates) return null;        return `${coordinates.lat}, ${coordinates.lng}`;    }    changeCoordinates = () => {        const {toggleColumn} = this.props;        this.setState({            coordinatesEdit: true        });        toggleColumn(false);    }    getSuggestedLocations = (place) => {        const {client: {country}} = this.props;        searchPlaceData(place, ['countrycodes='+country.toLowerCase()]).then(data => {            this.setState({                locationSearchPhrase: place,                locationSuggestions: data,                suggestionsLoading: false,                selectedSuggestionIndex: null            });        })    }    selectPlace = (phrase, data, index) => {        const {selectedSuggestionIndex} = this.state;        if(selectedSuggestionIndex === index) {            return;        }        const {lat, lon, address} = data;        const {isMobile, toggleColumn, updateEvent} = this.props;        const [meaning, rest] = formatLocationName(phrase, address);        this.setState({            location: `${meaning}, ${rest}`,            selectedSuggestionIndex: index,            coordinatesEdit: true        });        updateEvent({            coordinates: {                lat: lat,                lng: lon            },            location: `${meaning}, ${rest}`        });        if(isMobile) {            toggleColumn(false);        }    }    renderCategorySelectorModal = () => {        const {openCategorySelector, categories} = this.state;        return (            <Modal                onClose={() => this.executeToggleCategorySelector(false)}                onOpen={() => this.executeToggleCategorySelector(true)}                open={openCategorySelector}            >                <Modal.Header>Wybierz kategorie</Modal.Header>                <Modal.Content scrolling>                    <CategorySelector selectedCategories={categories} onChosenCategory={categories => this.onChosenCategory(categories)} />                </Modal.Content>                <Modal.Actions>                    <Button                        content="ZatwiedÅº"                        labelPosition='right'                        icon='checkmark'                        onClick={() => this.executeToggleCategorySelector(false)}                        color="blue"                    />                </Modal.Actions>            </Modal>        )    }    onChosenCategory = (categories) => {        this.setState({            categories: categories        });    }    displayChosenCategories = (categories) => {        const categoriesData = getCategoriesDataByIds(categories),              result = categoriesData.map((cat, key) => `${cat.label} ${key < categoriesData.length - 1 ? '> ' : ''}`).join('');        analytics.logEvent('User selected', {            categories: result        });        return result;    }    changeCategory = () => {        this.setState({            openCategorySelector: true        })    }    render() {        const { title, location, coordinates, owner, date, contact, editorState,            openAddConfirm, openCancelConfirm, messageType, locationSuggestions,            locationSearchPhrase, suggestionsLoading, selectedSuggestionIndex,            categories } = this.state;        const { profile, isColExpanded } = this.props;        return (            <>                <Segment clearing basic>                    <Button basic onClick={this.confirmCancelForm} floated="right" icon="x" />                    {                        isColExpanded ? (                            <Button className="button-event-form-compress" basic onClick={this.props.toggleColExpand} floated="right" icon="compress" />                        ) : (                            <Button className="button-event-form-expand" basic onClick={this.props.toggleColExpand} floated="right" icon="expand" />                        )                    }                    <Header floated="left" size="large">                        Dodaj wydarzenie                    </Header>                </Segment>                <Segment clearing basic>                    <Form error={messageType !== null} onSubmit={this.initAddConfirm} onKeyPress={this.handleKeyPress}>                        {this.renderMessage()}                        <Form.Field>                            <label>Kategoria</label>                            <Input placeholder="Wybierz kategorie" type="text" id="title" name="title"                                   action={{                                       color: 'blue',                                       labelPosition: 'right',                                       icon: 'list',                                       content: !categories ? 'Wybierz' : 'ZmieÅ„',                                       type: 'button',                                       onClick: () => this.changeCategory()                                   }}                                   readOnly value={!!categories ? this.displayChosenCategories(categories) : ""}                                   onChange={this.handleChange("categories")}                            />                            {this.renderCategorySelectorModal()}                        </Form.Field>                        <Form.Field>                            <label>TytuÅ‚</label>                            <Input placeholder="Wpisz tytuÅ‚ wydarzenia" type="text" id="title" name="title" value={title || ""} onChange={this.handleChange("title")} />                        </Form.Field>                        <Form.Group widths="equal">                            {isEmpty(profile) ?                                (                                    <Form.Field width={6}>                                        <label>Organizator</label>                                        <Input ref={el => this.nick = el} id="owner" name="owner" value={owner} placeholder="Wpisz nazwÄ™ organizatora" onChange={this.handleChange("owner")} />                                    </Form.Field>                                ) : (                                    <Form.Field width={6}>                                        <label>Organizator</label>                                        <Input icon='user' iconPosition='left' value={owner} name="owner" disabled/>                                    </Form.Field>                                )                            }                            <Popup                                trigger={                                    <Form.Input width={6} label="Kontakt" id="contact" name="contact" value={contact} placeholder="Jak siÄ™ z TobÄ… skontaktowaÄ‡?" onChange={this.handleChange("contact")} />                                }                                position='bottom right'                                content='TwÃ³j numer telefonu zostanie ukryty, jeÅ›li wpisz go jako xxxxxxxxx.'                                size="mini"                                inverted                                on={['hover', 'click']}                            />                        </Form.Group>                        <Form.Group widths="equal">                            <Form.Field width={6}>                                <label>Data i czas</label>                                <DatePicker                                    customInput={<DateInput />}                                    selected={moment(date)}                                    onChange={this.handleChange("date")}                                    onSelect={this.handleChange("date")}                                    minDate={moment()}                                    minTime={moment(date).startOf('day') <= moment().startOf('day') ? moment().add(15, "minutes") : moment().startOf('day')}                                    maxTime={moment().endOf('day')}                                    showTimeSelect                                    timeFormat="HH:mm"                                    timeIntervals={15}                                    dateFormat="LLL"                                    locale="pl"                                    timeCaption="Godzina"                                />                            </Form.Field>                            <Form.Field width={6}>                                <label>Miejsce spotkania</label>                                <Input placeholder="Wpisz lokacjÄ™" type="text" id="location" name="location"                                       value={location || ""} onChange={this.handleChange("location")}                                       loading={suggestionsLoading}                                />                            </Form.Field>                        </Form.Group>                        {                            locationSuggestions.length ? (                                <Form.Field>                                    <label>Podpowiedzi</label>                                    <Segment.Group stacked size="mini">                                        {                                            locationSuggestions.map((data, index) => {                                                const {address} = data;                                                const isSelected = selectedSuggestionIndex === index;                                                return (                                                    <Segment key={`suggestion-key-${index}`} size="mini"                                                             color={ isSelected ? `olive`: ``}                                                             inverted={isSelected}                                                             onClick={() => this.selectPlace(location, data, index)}                                                    >                                                        <LocationName phrase={locationSearchPhrase || location} address={address} />                                                    </Segment>                                                )                                            })                                        }                                    </Segment.Group>                                </Form.Field>                            ) : <></>                        }                        <Form.Field>                            <label>Koordynaty</label>                            {                                !coordinates && (                                    <Message                                        color="blue"                                        size="mini"                                        content="Klinknij na mapÄ™, aby dodaÄ‡ punkt w miejscu spotkania."                                    />                                )                            }                            <Input                                placeholder="Koordynaty spotkania"                                action={{                                    color: 'blue',                                    labelPosition: 'right',                                    icon: 'map marker alternate',                                    content: !coordinates ? 'Wybierz' : 'ZmieÅ„',                                    type: 'button',                                    onClick: () => this.changeCoordinates()                                }}                                value={this.formatCoordinates()}                                readOnly                            />                        </Form.Field>                        <Form.Field>                            <label>Opis</label>                            <Editor                                editorState={editorState}                                wrapperClassName="ar-editor-wrapper"                                editorClassName="ar-editor"                                onEditorStateChange={this.onEditorStateChange}                                placeholder="Napisz coÅ› o Twoim wydarzeniu..."                                localization={{                                    locale: "pl",                                }}                                toolbar={{                                    options: ["inline", "fontSize", "textAlign", "colorPicker", "emoji", "image"],                                    inline: {                                        options: ["bold"],                                    },                                    textAlign: {                                        inDropdown: true                                    },                                    link: {                                        popupClassName: 'dropdown-custom-center'                                    },                                    emoji: {                                        popupClassName: 'dropdown-custom-right'                                    },                                    image: {                                        popupClassName: 'dropdown-custom-right'                                    }                                }}                            />                        </Form.Field>                        <Form.Field>                            <Button type="button" onClick={this.confirmCancelForm} floated="left">                                Anuluj                            </Button>                            <Button type="submit" floated="right" color="olive" disabled={this.validateValues(["title", "description", "date", "owner", "contact", "coordinates", "location", "categories"]) || messageType === "nick/nick-exist"}>                                <Icon name="check" />                                Dodaj                            </Button>                            <Button type="button" onClick={this.previewDraft} floated="right" color="blue">                                PodglÄ…d                            </Button>                        </Form.Field>                    </Form>                    <Confirm                        open={openAddConfirm}                        cancelButton="Nie"                        confirmButton="Tak"                        content="Czy chcesz dodaÄ‡ nowe wydarzenie w zaznaczonym miejscu?"                        onCancel={() => this.executeAddConfirmation(false)}                        onConfirm={() => this.executeAddConfirmation(true)}                    />                    <Confirm                        open={openCancelConfirm}                        cancelButton="Nie"                        confirmButton="Tak"                        content="Czy chcesz zrezygnowaÄ‡ z dodawania tego wydarzenia? Wszystkie dane z formularza zostanÄ… trwale usuniÄ™te."                        onCancel={() => this.executeCancelConfirmation(false)}                        onConfirm={() => this.executeCancelConfirmation(true)}                    />                </Segment>            </>        )    }}class DateInput extends Component {    render () {        return (            <Input placeholder="Podaj datÄ™ i czas" type="text" id="date" name="date" value={this.props.value} onClick={this.props.onClick} onFocus={this.props.onClick} />        )    }}EventForm.contextTypes = {    router: PropTypes.object};const mapStateToProps = state => {    return {        client: state.client,        ...state.map    }};export default compose(    firebaseConnect(),    connect(({ firebase: { auth, profile } }) => ({ auth, profile })),    connect(mapStateToProps))(withGoogleReCaptcha(EventForm));